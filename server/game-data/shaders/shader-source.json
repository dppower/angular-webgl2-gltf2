{
	"blinn-phong.fs": {
		"attributes": ["position", "normal", "texture_coords"],
		"uniforms": ["light_direction", "base_color_texture"],
		"source": "#version 300 es\nprecision mediump float;\nfloat saturate(in float value) {\nreturn clamp(value, 0.0, 1.0);\n}\nconst float ambient_strength = 0.1;\nconst float specular_strength = 0.5;\nconst vec3 light_color = vec3(1.0, 1.0, 1.0);\nconst float kPi = 3.14159265;\nconst float kShininess = 16.0;\nin vec3 position;\nin vec3 normal;\nin vec2 texture_coords;\nuniform vec3 light_direction;\nuniform sampler2D base_color_texture;\nout vec4 fragment_color;\nvoid main() {\nvec3 light_position;\nfloat light_radius;\nfloat light_distance = length(light_position - position);\nfloat attenuation = pow(saturate(1.0 - pow(light_distance / light_radius, 4.0)), 2.0) / (1.0 + light_distance * light_distance);\nvec3 ambient = ambient_strength * light_color;\nvec3 N = normalize(normal);\nvec3 L = normalize(light_direction);\nfloat NoL = max(dot(N, L), 0.0);\nvec3 diffuse = NoL * light_color;\nvec3 view = normalize(-position);\nconst float normalisation_factor = (8.0 + kShininess) / (8.0 * kPi);\nvec3 half = normalize(L + view);\nfloat phong_blinn = pow(max(dot(view, half), 0.0), kShininess);\nvec3 specular = specular_strength * normalisation_factor * phong_blinn * light_color;\nvec4 base_color = texture(base_color_texture, texture_coords);\nfragment_color = vec4(base_color.rgb * (ambient + diffuse + specular), 1.0);\n}\n"
	},
	"diffuse-base-texture.fs": {
		"attributes": ["position", "normal", "texture_coords"],
		"uniforms": ["light_direction", "base_color_texture"],
		"source": "#version 300 es\nprecision mediump float;\nconst float ambient_color = 0.1;\nin vec3 position;\nin vec3 normal;\nin vec2 texture_coords;\nuniform vec3 light_direction;\nuniform sampler2D base_color_texture;\nout vec4 fragment_color;\nvoid main(void) {\nvec3 N = normalize(normal);\nvec3 L = normalize(light_direction);\nfloat NoL = max(dot(N, L), 0.0);\nvec4 base_color = texture(base_color_texture, texture_coords);\nfragment_color = vec4(base_color.rgb * (ambient_color + NoL), 1.0);\n}\n"
	},
	"diffuse-base-texture.vs": {
		"attributes": ["vertex_position", "vertex_normal", "vertex_uv_coords"],
		"uniforms": ["projection_matrix", "view_matrix", "transform_matrix", "normal_matrix"],
		"source": "#version 300 es\nlayout(location = 0) in vec3 vertex_position;\nlayout(location = 1) in vec3 vertex_normal;\nlayout(location = 2) in vec2 vertex_uv_coords;\nuniform mat4 projection_matrix;\nuniform mat4 view_matrix;\nuniform mat4 transform_matrix;\nuniform mat4 normal_matrix;\nout vec3 normal;\nout vec3 position;\nout vec2 texture_coords;\nvoid main(void) {\ngl_Position = projection_matrix * vec4(vertex_position, 1.0);\nposition = vec3(view_matrix * vec4(vertex_position, 1.0));\nnormal = mat3(normal_matrix) * vertex_normal;\ntexture_coords = vertex_uv_coords;\n}\n"
	},
	"diffuse-oren-nayar.fs": {
		"attributes": ["position", "normal"],
		"uniforms": ["uniform_color", "roughness", "light_direction"],
		"source": "#version 300 es\nprecision mediump float;\nconst float ambient_color = 0.1;\nin vec3 position;\nin vec3 normal;\nuniform vec4 uniform_color;\nuniform float roughness;\nuniform vec3 light_direction;\nout vec4 fragment_color;\nvoid main(void) {\nvec3 n = normalize(normal);\nvec3 l = normalize(light_direction);\nvec3 v = normalize(-position);\nfloat mu_nl = max(0.0, dot(n, l));\nfloat mu_nv = max(0.0, dot(n, v));\nfloat nu_nl = 1.0 - mu_nl * mu_nl;\nfloat nu_nv = 1.0 - mu_nv * mu_nv;\nfloat gamma = sqrt(nu_nl * nu_nv);\nfloat a_2 = roughness * roughness;\nvec2 oren_nayar = vec2(1.0, 0.0) + vec2(0.45, -0.5) * (a_2 / (a_2 + vec2(0.57, 0.09)));\nvec3 light_plane = normalize(l - mu_nl * n);\nvec3 view_plane = normalize(v - mu_nv * n);\nfloat cos_phi = max(0.0, dot(light_plane, view_plane));\nfloat diffuse = mu_nl * (oren_nayar.x + oren_nayar.y * cos_phi * gamma / max(mu_nl, mu_nv));\nfragment_color = vec4(uniform_color.xyz * (diffuse + ambient_color), 1.0);\n}\n"
	},
	"diffuse-uniform-color.fs": {
		"attributes": ["position", "normal"],
		"uniforms": ["light_direction", "uniform_color"],
		"source": "#version 300 es\nprecision mediump float;\nconst float ambient_color = 0.1;\nin vec3 position;\nin vec3 normal;\nuniform vec3 light_direction;\nuniform vec4 uniform_color;\nout vec4 fragment_color;\nvoid main() {\nvec3 N = normalize(normal);\nvec3 L = normalize(light_direction);\nfloat NoL = max(dot(N, L), 0.0);\nfragment_color = vec4(uniform_color.rgb * (ambient_color + NoL), 1.0);\n}\n"
	},
	"diffuse-uniform-color.vs": {
		"attributes": ["vertex_position", "vertex_normal"],
		"uniforms": ["projection_matrix", "view_matrix", "transform_matrix", "normal_matrix"],
		"source": "#version 300 es\nlayout(location = 0) in vec3 vertex_position;\nlayout(location = 1) in vec3 vertex_normal;\nuniform mat4 projection_matrix;\nuniform mat4 view_matrix;\nuniform mat4 transform_matrix;\nuniform mat4 normal_matrix;\nout vec3 position;\nout vec3 normal;\nvoid main() {\ngl_Position = projection_matrix * vec4(vertex_position, 1.0);\nposition = vec3(view_matrix * vec4(vertex_position, 1.0));\nnormal = mat3(normal_matrix) * vertex_normal;\n}\n"
	},
	"inscattering-3d.fs": {
		"attributes": ["coordinates"],
		"uniforms": ["transmittance_sampler", "layer", "sun_direction"],
		"source": "#version 300 es\nprecision mediump float;\nconst float GROUND_RADIUS = 6360.0;\nconst float ATMOSPHERE_LIMIT = 6420.0;\nconst vec3 BETA_R = vec3(5.8e-3, 1.35e-2, 3.31e-2);\nconst float HR = 8.0;\nconst float BETA_M_SCATTER = 4e-3;\nconst float HM = 1.2;\nconst float PI = 3.141592657;\nconst float PHASE_FRACTION = 3.0 / (16.0 * PI);\nconst float HALF_PHASE_FRACTION = 0.5 * PHASE_FRACTION;\nconst float MIE_G = 0.8;\nconst int INSCATTER_SAMPLES = 50;\nconst float sun_intensity = 100.0;\nuniform sampler2D transmittance_sampler;\nuniform float layer;\nuniform vec3 sun_direction;\nin vec2 coordinates;\nout vec4 fragment_color;\nfloat view_distance(float mu, float r) {\nreturn -r * mu + sqrt(r * r * (mu * mu - 1.0) + ATMOSPHERE_LIMIT * ATMOSPHERE_LIMIT);\n}\nvec4 transmittance(float mu, float r) {\nfloat x = (r - GROUND_RADIUS) / (ATMOSPHERE_LIMIT - GROUND_RADIUS);\nfloat y = 0.5 * (1.0 + mu);\nreturn texture(transmittance_sampler, vec2(x, y));\n}\nvec4 transmittance_q(float mu_x, vec3 p, vec3 v, vec3 n_q, float r_q) {\nfloat r_p = length(p);\nvec4 t_x = transmittance(mu_x, r_p);\nfloat mu_q = dot(v, n_q);\nvec4 t_xq = transmittance(mu_q, r_q);\nvec4 t_q = t_x / t_xq;\nreturn t_q;\n}\nfloat phase_rayleigh(float mu) {\nreturn PHASE_FRACTION * (1.0 + mu * mu);\n}\nfloat phase_mie(float mu) {\nreturn (HALF_PHASE_FRACTION * (1.0 - MIE_G * MIE_G) * (1.0 + mu * mu)) / ((2.0 + MIE_G * MIE_G) * pow(1.0 + (MIE_G * MIE_G) - 2.0 * MIE_G * mu, 1.5));\n}\nvec3 integrand(float mu_x, vec3 p, vec3 v, vec3 s, float d_q) {\nvec3 q = (d_q * v) + p;\nfloat r_q = length(q);\nfloat h_q = r_q - GROUND_RADIUS;\nvec3 n_q = normalize(q);\nfloat mu_sq = dot(s, n_q);\nvec4 t_sp = transmittance_q(mu_x, p, v, n_q, r_q) * transmittance(mu_sq, r_q);\nvec3 rayleigh = phase_rayleigh(mu_x) * BETA_R * exp(-h_q / HR);\nfloat mie = phase_mie(mu_x) * BETA_M_SCATTER * exp(-h_q / HM);\nreturn vec3(t_sp.xyz * (rayleigh + mie));\n}\nvec3 inscatter(float mu_x, vec3 p, vec3 v, vec3 s) {\nvec3 colour;\nfloat r_p = length(p);\nfloat d_i = view_distance(mu_x, r_p) / float(INSCATTER_SAMPLES);\nvec3 colour_i = integrand(mu_x, p, v, s, 0.0);\nfor (int i = 1; i <= INSCATTER_SAMPLES; ++i) {\nfloat d_q = float(i) * d_i;\nvec3 colour_j = integrand(mu_x, p, v, s, d_q);\ncolour += d_i * (colour_i + colour_j) / 2.0;\ncolour_i = colour_j;\n}\nreturn colour * sun_intensity;\n}\nvoid main() {\nvec3 p = vec3(0.0, GROUND_RADIUS + 0.002, 0.0);\nfloat r_p = length(p);\nfloat mu_h = -1.0 * sqrt(1.0 - pow((GROUND_RADIUS / r_p), 2.0));\nfloat mu_x = 1.0 + (coordinates.x - 1.0) * (mu_h - 1.0) / 2.0;\nfloat phi = PI * (coordinates.y + 1.0);\nfloat sin_theta = sqrt(1.0 - mu_x * mu_x);\nfloat x = sin_theta * sin(phi);\nfloat z = sin_theta * cos(phi);\nvec3 view = normalize(vec3(x, mu_x, z));\nvec3 sun = normalize(sun_direction);\nvec3 inscatter_color = inscatter(mu_x, p, view, sun);\nfragment_color = vec4(inscatter_color, 1.0);\n}\n"
	},
	"inscattering.fs": {
		"attributes": ["view_direction"],
		"uniforms": ["transmittance_sampler", "noon_position"],
		"source": "#version 300 es\nprecision mediump float;\nconst float GROUND_RADIUS = 6360.0;\nconst float ATMOSPHERE_LIMIT = 6420.0;\nconst vec3 BETA_R = vec3(5.8e-3, 1.35e-2, 3.31e-2);\nconst float HR = 8.0;\nconst float BETA_M_SCATTER = 4e-3;\nconst float HM = 1.2;\nconst float PI = 3.141592657;\nconst float PHASE_FRACTION = 3.0 / (16.0 * PI);\nconst float HALF_PHASE_FRACTION = 0.5 * PHASE_FRACTION;\nconst float MIE_G = 0.8;\nconst int INSCATTER_SAMPLES = 100;\nconst float sun_intensity = 100.0;\nuniform sampler2D transmittance_sampler;\nuniform vec3 noon_position;\nin vec3 view_direction;\nout vec4 fragment_color;\nfloat view_distance(float mu, float r) {\nreturn -r * mu + sqrt(r * r * (mu * mu - 1.0) + ATMOSPHERE_LIMIT * ATMOSPHERE_LIMIT);\n}\nvec4 transmittance(float mu, float r) {\nfloat x = (r - GROUND_RADIUS) / (ATMOSPHERE_LIMIT - GROUND_RADIUS);\nfloat y = 0.5 * (1.0 + mu);\nreturn texture(transmittance_sampler, vec2(x, y));\n}\nvec4 transmittance_q(float mu_x, vec3 p, vec3 v, vec3 n_q, float r_q) {\nfloat r_p = length(p);\nvec4 t_x = transmittance(mu_x, r_p);\nfloat mu_q = dot(v, n_q);\nvec4 t_xq = transmittance(mu_q, r_q);\nvec4 t_q = t_x / t_xq;\nreturn t_q;\n}\nfloat phase_rayleigh(float mu) {\nreturn PHASE_FRACTION * (1.0 + mu * mu);\n}\nfloat phase_mie(float mu) {\nreturn (HALF_PHASE_FRACTION * (1.0 - MIE_G * MIE_G) * (1.0 + mu * mu)) / ((2.0 + MIE_G * MIE_G) * pow(1.0 + (MIE_G * MIE_G) - 2.0 * MIE_G * mu, 1.5));\n}\nvec3 integrand(float mu_x, vec3 p, vec3 v, vec3 s, float d_q) {\nvec3 q = (d_q * v) + p;\nfloat r_q = length(q);\nfloat h_q = r_q - GROUND_RADIUS;\nvec3 n_q = normalize(q);\nfloat mu_sq = dot(s, n_q);\nvec4 t_sp = transmittance_q(mu_x, p, v, n_q, r_q) * transmittance(mu_sq, r_q);\nvec3 rayleigh = phase_rayleigh(mu_x) * BETA_R * exp(-h_q / HR);\nfloat mie = phase_mie(mu_x) * BETA_M_SCATTER * exp(-h_q / HM);\nreturn vec3(t_sp.xyz * (rayleigh + mie));\n}\nvec3 inscatter(vec3 p, vec3 v, vec3 s) {\nvec3 colour;\nvec3 n_p = normalize(p);\nfloat mu_x = dot(n_p, v);\nfloat r_p = length(p);\nfloat d_i = view_distance(mu_x, r_p) / float(INSCATTER_SAMPLES);\nfloat mu_h = -1.0 * sqrt(1.0 - pow((GROUND_RADIUS / r_p), 2.0));\nif (mu_x < mu_h) {\nreturn vec3(0.5, 0.66, 0.33);\n}\nvec3 colour_i = integrand(mu_x, p, v, s, 0.0);\nfor (int i = 1; i <= INSCATTER_SAMPLES; ++i) {\nfloat d_q = float(i) * d_i;\nvec3 colour_j = integrand(mu_x, p, v, s, d_q);\ncolour += d_i * (colour_i + colour_j) / 2.0;\ncolour_i = colour_j;\n}\nreturn colour * sun_intensity;\n}\nvoid main() {\nvec3 v = normalize(view_direction);\nvec3 p = vec3(0.0, GROUND_RADIUS + 0.002, 0.0);\nvec3 s = normalize(noon_position);\nvec3 inscatter_color = inscatter(p, v, s);\nfragment_color = vec4(inscatter_color, 1.0);\n}\n"
	},
	"irradiance-cubemap.fs": {
		"attributes": ["view_direction"],
		"uniforms": ["radiance"],
		"source": "#version 300 es\nprecision mediump float;\nconst float PI = 3.1415926536;\nin vec3 view_direction;\nuniform samplerCube radiance;\nout vec4 fragment_color;\nvoid main() {\nvec3 view = normalize(view_direction);\nvec3 up = vec3(0.0, 1.0, 0.0);\nvec3 right = normalize(cross(up, view));\nup = cross(view, right);\nvec3 sum_colors = vec3(0.0, 0.0, 0.0);\nint sample_count = 0;\nfor (float phi = 0; phi < 6.283; phi += 0.025) {\nfor(float theta = 0; theta < 1.571; theta += 0.1) {\nvec3 sample_vector = cos(theta) * view + sin(theta) * (cos(phi) * right + sin(phi) * up);\nsum_colors += texture(radiance, sample_vector).rgb * cos(theta) * sin(theta);\nsample_count ++;\n}\n}\nvec3 averaged_color = PI * sum_colors / sample_count;\nfragment_color = vec4(averaged_color, 1.0);\n}\n"
	},
	"pbr-ggx.fs": {
		"attributes": ["position", "normal", "texture_coords"],
		"uniforms": ["base_color_texture", "metal_rough_texture", "light_direction"],
		"source": "#version 300 es\nprecision mediump float;\nconst float PI = 3.1415926536;\nconst vec3 light_color = vec3(1.0, 1.0, 1.0);\nconst float ambient_strength = 0.1;\nin vec3 position;\nin vec3 normal;\nin vec2 texture_coords;\nuniform sampler2D base_color_texture;\nuniform sampler2D metal_rough_texture;\nuniform vec3 light_direction;\nout vec4 fragment_color;\nvec3 diffuse_lambert(vec3 diffuse_color) {\nreturn diffuse_color / PI;\n}\nvec3 f_schlick(float NoV, vec3 F0) {\nreturn F0 + (vec3(1.0) - F0) * pow((1.0 - NoV), 5.0);\n}\nfloat g_ggx(float a, float NoL, float NoV) {\nfloat a_2 = a * a;\nfloat g_lh = NoL + sqrt(NoL * NoL * (1.0 - a_2) + a_2);\nfloat g_vh = NoV + sqrt(NoV * NoV * (1.0 - a_2) + a_2);\nreturn 0.5 / (g_lh * g_vh);\n}\nfloat d_ggx(float a, float NoH) {\nfloat a_2 = a * a;\nfloat d = 1.0 + (NoH * NoH * (a_2 - 1.0));\nreturn a_2 / (PI * d * d);\n}\nvoid main() {\nvec3 normal = normalize(normal);\nvec3 light = normalize(light_direction);\nvec3 view = normalize(-position);\nvec3 half = normalize(light + view);\nfloat NoL = max(0.0, dot(normal, light));\nfloat NoV = max(0.0, dot(normal, view));\nfloat NoH = max(0.0, dot(normal, half));\nvec4 metal_rough = texture(metal_rough_texture, texture_coords);\nfloat roughness = metal_rough.r;\nfloat a = roughness * roughness;\nvec3 base_color = texture(base_color_texture, texture_coords).rgb;\nfloat metallic = metal_rough.g;\nvec3 F0 = (metallic > 0.01) ? base_color : vec3(0.04);\nvec3 fresnel = f_schlick(NoV, F0);\nvec3 k_d = (metallic > 0.01) ? vec3(0.0) : (vec3(1.0) - fresnel);\nvec3 diffuse_color = k_d * diffuse_lambert(base_color);\nfloat D = d_ggx(a, NoH);\nfloat G = g_ggx(a, NoL, NoV);\nvec3 specular_color = D * G * fresnel;\nvec3 final_color = NoL * (diffuse_color + specular_color) * light_color;\nfragment_color = vec4(final_color, 1.0);\n}\n"
	},
	"per-vertex-color.fs": {
		"attributes": ["color"],
		"uniforms": [],
		"source": "#version 300 es\nprecision mediump float;\nin vec4 color;\nout vec4 fragment_color;\nvoid main() {\nfragment_color = color;\n}\n"
	},
	"per-vertex-color.vs": {
		"attributes": ["vertex_position", "vertex_color"],
		"uniforms": ["projection_matrix", "view_matrix", "transform_matrix"],
		"source": "#version 300 es\nlayout(location = 0) in vec3 vertex_position;\nlayout(location = 3) in vec3 vertex_color;\nuniform mat4 projection_matrix;\nuniform mat4 view_matrix;\nuniform mat4 transform_matrix;\nout vec4 color;\nvoid main() {\ngl_Position = projection_matrix * vec4(vertex_position, 1.0);\ncolor = vec4(vertex_color, 1.0);\n}\n"
	},
	"sky-quad.fs": {
		"attributes": ["view_direction"],
		"uniforms": ["inscatter_3d_sampler", "layer"],
		"source": "#version 300 es\nprecision mediump float;\nprecision highp sampler3D;\nuniform sampler3D inscatter_3d_sampler;\nin vec3 view_direction;\nuniform float layer;\nout vec4 fragment_color;\nvoid main() {\nfloat u = 0.5 * (view_direction.x + 1.0);\nfloat v = 0.5 * (view_direction.y + 1.0);\nvec3 view = vec3(u, v, layer);\nvec4 inscatter_texel = texture(inscatter_3d_sampler, view);\nfragment_color = vec4(inscatter_texel.xyz, 1.0);\n}\n"
	},
	"sky-quad.vs": {
		"attributes": ["vertex_position"],
		"uniforms": ["inverse_projection", "inverse_view"],
		"source": "#version 300 es\nlayout(location = 0) in vec2 vertex_position;\nuniform mat4 inverse_projection;\nuniform mat4 inverse_view;\nout vec3 view_direction;\nvoid main() {\ngl_Position = vec4(vertex_position, 0.0, 1.0);\nview_direction = mat3(inverse_view) * vec3(vertex_position, -1.0);\n}\n"
	},
	"texture-2d.vs": {
		"attributes": ["vertex_position"],
		"uniforms": [],
		"source": "#version 300 es\nlayout(location = 0) in vec2 vertex_position;\nout vec2 coordinates;\nvoid main() {\ngl_Position = vec4(vertex_position, 0.0, 1.0);\ncoordinates = vertex_position;\n}\n"
	},
	"texture-cube.vs": {
		"attributes": ["vertex_position"],
		"uniforms": ["cube_face"],
		"source": "#version 300 es\nlayout(location = 0) in vec2 vertex_position;\nuniform int cube_face;\nout vec3 view_direction;\nvoid main() {\ngl_Position = vec4(vertex_position, 0.0, 1.0);\nif (cube_face == 0) {\nview_direction = vec3(1.0, vertex_position.y, vertex_position.x);\n}\nelse if (cube_face == 1) {\nview_direction = vec3(-1.0, vertex_position.y, -vertex_position.x);\n}\nelse if (cube_face == 2) {\nview_direction = vec3(vertex_position.x, -1.0, -vertex_position.y);\n}\nelse if (cube_face == 3) {\nview_direction = vec3(vertex_position.x, 1.0, vertex_position.y);\n}\nelse if (cube_face == 4) {\nview_direction = vec3(-vertex_position.x, vertex_position.y, 1.0);\n}\nelse if (cube_face == 5) {\nview_direction = vec3(vertex_position.x, vertex_position.y, -1.0);\n}\n}\n"
	},
	"transmittance.fs": {
		"attributes": ["coordinates"],
		"uniforms": [],
		"source": "#version 300 es\nprecision mediump float;\nconst float GROUND_RADIUS = 6360.0;\nconst float ATMOSPHERE_LIMIT = 6420.0;\nconst vec3 BETA_R = vec3(5.8e-3, 1.35e-2, 3.31e-2);\nconst float HR = 8.0;\nconst float BETA_M_SCATTER = 4e-3;\nconst float BETA_M_EX = BETA_M_SCATTER / 0.9;\nconst float HM = 1.2;\nconst int TRANSMITTANCE_SAMPLES = 500;\nin vec2 coordinates;\nout vec4 fragment_color;\nfloat view_distance(float mu, float r) {\nreturn -r * mu + sqrt(r * r * (mu * mu - 1.0) + ATMOSPHERE_LIMIT * ATMOSPHERE_LIMIT);\n}\nfloat optical_depth(float H, float r_p, float mu_x) {\nfloat result = 0.0;\nfloat d_i = view_distance(mu_x, r_p) / float(TRANSMITTANCE_SAMPLES);\nfloat depth_i = exp(-(r_p - GROUND_RADIUS) / H);\nfor (int i = 1; i <= TRANSMITTANCE_SAMPLES; ++i) {\nfloat d_q = float(i) * d_i;\nfloat h_q = sqrt(r_p * r_p + d_q * d_q + 2.0 * d_q * r_p * mu_x) - GROUND_RADIUS;\nfloat depth_j = exp(-h_q / H);\nresult += d_i * (depth_i + depth_j) / 2.0;\ndepth_i = depth_j;\n}\nreturn result;\n}\nvoid main() {\nfloat r_p = GROUND_RADIUS + ((1.0 + coordinates.x) * 0.5) * (ATMOSPHERE_LIMIT - GROUND_RADIUS);\nfloat mu_x = 1.0 - 0.5 * (coordinates.y + 1.0) * (sqrt(1.0 - pow((GROUND_RADIUS / r_p), 2.0)));\nvec3 depth = BETA_R * optical_depth(HR, r_p, mu_x) + BETA_M_EX * optical_depth(HM, r_p, mu_x);\nfragment_color = vec4(exp(-depth), 1.0);\n}\n"
	},
	"uniform-color.fs": {
		"attributes": [],
		"uniforms": ["uniform_color"],
		"source": "#version 300 es\nprecision mediump float;\nuniform vec4 uniform_color;\nout vec4 fragment_color;\nvoid main() {\nfragment_color = uniform_color;\n}\n"
	},
	"uniform-color.vs": {
		"attributes": ["vertex_position"],
		"uniforms": ["projection_matrix", "view_matrix", "transform_matrix"],
		"source": "#version 300 es\nin vec3 vertex_position;\nuniform mat4 projection_matrix;\nuniform mat4 view_matrix;\nuniform mat4 transform_matrix;\nvoid main() {\ngl_Position = projection_matrix * vec4(vertex_position, 1.0);\n}\n"
	}
}